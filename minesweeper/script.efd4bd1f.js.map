{"version":3,"sources":["js/minesweeper.js","js/script.js"],"names":["times","_","range","TILE_STATUSES","HIDDEN","MINE","NUMBER","MARKED","createBoard","boardSize","minePositions","x","y","mine","some","positionMatch","bind","status","markedTilesCount","board","reduce","count","row","filter","tile","length","markTile","replaceTile","position","newTile","map","revealTile","adjacentTiles","nearbyTiles","mines","t","newBoard","adjacentMinesCount","b","checkWin","every","checkLose","a","offsets","flatMap","xOffset","yOffset","BOARD_SIZE","NUMBER_OF_MINES","boardElement","document","querySelector","gameStatus","messageText","newGameButton","scoreBoard","level","odometer","difficulty","score","scoreAdded","newGame","boardSizeChoice","numberOfMines","displayMinesLeft","refreshScore","refreshLevel","getMinePositions","render","innerHTML","checkGameEnd","getTileElements","forEach","element","append","listMinesLeft","tileToElement","createElement","dataset","textContent","minesLeftText","win","lose","thisRoundScore","Math","round","setTimeout","click","stopProp","e","stopImmediatePropagation","positions","randomNumber","push","size","floor","random","addEventListener","target","matches","parseInt","preventDefault","style","setProperty"],"mappings":"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","file":"script.efd4bd1f.js","sourceRoot":"..","sourcesContent":["const times = _.times();\nconst range = _.range();\n\nexport const TILE_STATUSES = {\n  HIDDEN: \"hidden\",\n  MINE: \"mine\",\n  NUMBER: \"number\",\n  MARKED: \"marked\",\n}\n\nexport function createBoard(boardSize, minePositions) {\n  return times(x => {\n    return times(y => {\n      return {\n        x,\n        y,\n        mine: minePositions.some(positionMatch.bind(null, { x, y })),\n        status: TILE_STATUSES.HIDDEN,\n      }\n    }, boardSize)\n  }, boardSize)\n}\n\nexport function markedTilesCount(board) {\n  return board.reduce((count, row) => {\n    return (\n      count + row.filter(tile => tile.status === TILE_STATUSES.MARKED).length\n    )\n  }, 0)\n}\n\nexport function markTile(board, { x, y }) {\n  const tile = board[x][y]\n  if (\n    tile.status !== TILE_STATUSES.HIDDEN &&\n    tile.status !== TILE_STATUSES.MARKED\n  ) {\n    return board\n  }\n\n  if (tile.status === TILE_STATUSES.MARKED) {\n    return replaceTile(\n      board,\n      { x, y },\n      { ...tile, status: TILE_STATUSES.HIDDEN }\n    )\n  } else {\n    return replaceTile(\n      board,\n      { x, y },\n      { ...tile, status: TILE_STATUSES.MARKED }\n    )\n  }\n}\n\nfunction replaceTile(board, position, newTile) {\n  return board.map((row, x) => {\n    return row.map((tile, y) => {\n      if (positionMatch(position, { x, y })) {\n        return newTile\n      }\n      return tile\n    })\n  })\n}\n\nexport function revealTile(board, { x, y }) {\n  const tile = board[x][y]\n  if (tile.status !== TILE_STATUSES.HIDDEN) {\n    return board\n  }\n\n  if (tile.mine) {\n    return replaceTile(board, { x, y }, { ...tile, status: TILE_STATUSES.MINE })\n  }\n\n  const adjacentTiles = nearbyTiles(board, tile)\n  const mines = adjacentTiles.filter(t => t.mine)\n  const newBoard = replaceTile(\n    board,\n    { x, y },\n    { ...tile, status: TILE_STATUSES.NUMBER, adjacentMinesCount: mines.length }\n  )\n  if (mines.length === 0) {\n    return adjacentTiles.reduce((b, t) => {\n      return revealTile(b, t)\n    }, newBoard)\n  }\n  return newBoard\n}\n\nexport function checkWin(board) {\n  return board.every(row => {\n    return row.every(tile => {\n      return (\n        tile.status === TILE_STATUSES.NUMBER ||\n        (tile.mine &&\n          (tile.status === TILE_STATUSES.HIDDEN ||\n            tile.status === TILE_STATUSES.MARKED))\n      )\n    })\n  })\n}\n\nexport function checkLose(board) {\n  return board.some(row => {\n    return row.some(tile => {\n      return tile.status === TILE_STATUSES.MINE\n    })\n  })\n}\n\nexport function positionMatch(a, b) {\n  return a.x === b.x && a.y === b.y\n}\n\nfunction nearbyTiles(board, { x, y }) {\n  const offsets = range(-1, 2)\n\n  return offsets\n    .flatMap(xOffset => {\n      return offsets.map(yOffset => {\n        return board[x + xOffset]?.[y + yOffset]\n      })\n    })\n    .filter(tile => tile != null)\n}\n","// Display/UI\n\nimport {\n  TILE_STATUSES,\n  createBoard,\n  markTile,\n  revealTile,\n  checkWin,\n  checkLose,\n  positionMatch,\n  markedTilesCount,\n} from \"./minesweeper.js\"\n\nconst BOARD_SIZE = 10\nconst NUMBER_OF_MINES = 3\nconst boardElement = document.querySelector(\".board\")\nconst gameStatus = document.querySelector(\".gamestatus\")\nconst messageText = document.querySelector(\".subtext\")\nconst newGameButton = document.querySelector(\".newgame\")\nconst scoreBoard = document.querySelector(\".scoreboard\")\nconst level = document.querySelector(\".level\")\nconst odometer = document.querySelector(\".odometer\")\n\nlet board = null;\nlet difficulty = 0;\nlet score = 0;\nlet scoreAdded = false;\n\nnewGameButton.addEventListener(\"click\", e => {\n    newGame()\n})\n\nfunction newGame() {\n\n    board = null;\n    scoreAdded = false;\n\n    var boardSizeChoice = BOARD_SIZE;\n    var numberOfMines = NUMBER_OF_MINES + difficulty;\n\n    displayMinesLeft();\n    refreshScore();\n    refreshLevel();\n\n    board = createBoard(\n      boardSizeChoice,\n      getMinePositions(boardSizeChoice, numberOfMines)\n    )\n\n    render();\n}\n\nfunction render() {\n  boardElement.innerHTML = \"\"\n\n  if(board){\n      checkGameEnd()\n\n      getTileElements().forEach(element => {\n        boardElement.append(element)\n      })\n\n      listMinesLeft()\n  }\n\n}\n\nfunction refreshScore() {\n    scoreBoard.innerHTML = score;\n}\n\nfunction refreshLevel() {\n    level.innerHTML = difficulty;\n}\n\nfunction displayMinesLeft() {\n    messageText.innerHTML = \"Mines Left: <span data-mine-count></span>\"\n}\n\nfunction getTileElements() {\n  return board.flatMap(row => {\n    return row.map(tileToElement)\n  })\n}\n\nfunction tileToElement(tile) {\n  const element = document.createElement(\"div\")\n  element.dataset.status = tile.status\n  element.dataset.x = tile.x\n  element.dataset.y = tile.y\n  element.textContent = tile.adjacentMinesCount || \"\"\n  return element\n}\n\nboardElement.addEventListener(\"click\", e => {\n  if (!e.target.matches(\"[data-status]\")) return\n\n  board = revealTile(board, {\n    x: parseInt(e.target.dataset.x),\n    y: parseInt(e.target.dataset.y),\n  })\n  render()\n})\n\nboardElement.addEventListener(\"contextmenu\", e => {\n  if (!e.target.matches(\"[data-status]\")) return\n\n  e.preventDefault()\n  board = markTile(board, {\n    x: parseInt(e.target.dataset.x),\n    y: parseInt(e.target.dataset.y),\n  })\n  render()\n})\n\nboardElement.style.setProperty(\"--size\", BOARD_SIZE)\nnewGame()\n\nfunction listMinesLeft() {\n    let minesLeftText = document.querySelector(\"[data-mine-count]\")\n    if(minesLeftText !== null){\n        minesLeftText.innerHTML = NUMBER_OF_MINES + difficulty - markedTilesCount(board)\n    }\n}\n\nfunction checkGameEnd() {\n  const win = checkWin(board)\n  const lose = checkLose(board)\n\n  // if (win || lose) {\n  //   boardElement.addEventListener(\"click\", stopProp, { capture: true })\n  //   boardElement.addEventListener(\"contextmenu\", stopProp, { capture: true })\n  // }\n\n  if (win) {\n\n    if(!scoreAdded){\n        difficulty++;\n        let thisRoundScore = (difficulty * 1.5) * 1000;\n        score = score + Math.round(thisRoundScore);\n        scoreAdded = true;\n        refreshScore();\n        refreshLevel();\n        messageText.textContent = \"You Win\" + \" +\" + thisRoundScore;\n        setTimeout(function(){ newGameButton.click(); }, 2000);\n\n    }\n\n  }\n  if (lose) {\n    messageText.textContent = \"You Lose\"\n    if(difficulty > 0) difficulty--;\n    board.forEach(row => {\n      row.forEach(tile => {\n        if (tile.status === TILE_STATUSES.MARKED) board = markTile(board, tile)\n        if (tile.mine) board = revealTile(board, tile)\n      })\n    })\n    setTimeout(function(){ newGameButton.click(); }, 2000);\n  }\n}\n\nfunction stopProp(e) {\n  e.stopImmediatePropagation()\n}\n\nfunction getMinePositions(boardSize, numberOfMines) {\n  const positions = []\n\n  while (positions.length < numberOfMines) {\n    const position = {\n      x: randomNumber(boardSize),\n      y: randomNumber(boardSize),\n    }\n\n    if (!positions.some(positionMatch.bind(null, position))) {\n      positions.push(position)\n    }\n  }\n\n  return positions\n}\n\nfunction randomNumber(size) {\n  return Math.floor(Math.random() * size)\n}\n"]}